
                <option value="" disabled>Games:</option>
                <option value="5">Pong</option>




`    ; Pong - Made by Bastiaan van der Plaat
    ; Don't run this program direct but at 8 kHz or 16 kHz!!!
    ; Player 1: 'w' move paddle up, 's' move paddle down
    ; Player 2: 'o' move paddle up, 'l' move paddle down
    ; Other: 'x' halt program

game_loop:

    ; Input
input_loop:
    mov a, [0xfe]
    cmp a, 0
    je input_loop_done
    cmp a, 'w'
    je player1_move_up
    cmp a, 's'
    je player1_move_down
    cmp a, 'o'
    je player2_move_up
    cmp a, 'l'
    je player2_move_down
    cmp a, 'x'
    je game_stop
    jmp input_loop

input_loop_done:
    ; Update
    mov a, [ball_x]
    cmp a, 4
    jb player1_scored
    cmp a, 255 - 10 - 4
    ja player2_scored

ball_vx_continue:
    mov a, [ball_y]
    cmp a, 4
    jb invert_ball_vy
    cmp a, 255 - 10 - 4
    ja invert_ball_vy

ball_vy_continue:
    mov a, [ball_x]
    add a, [ball_vx]
    mov [ball_x], a

    mov a, [ball_y]
    add a, [ball_vy]
    mov [ball_y], a

    ; Render
    mov a, 0
    mov [0xfd], a

    push 100
    push 15
    mov a, [player1_y]
    push a
    push 0
    call draw_rect

    push 10
    push 10
    mov a, [ball_y]
    push a
    mov a, [ball_x]
    push a
    call draw_rect

    push 100
    push 15
    mov a, [player2_y]
    push a
    push 255 - 15
    call draw_rect

    mov a, 1
    mov [0xfd], a

    jmp game_loop

player1_scored:
    mov a, [player1_score]
    add a, 1
    mov [player1_score], a
    jmp invert_ball_vx
player2_scored:
    mov a, [player2_score]
    add a, 1
    mov [player2_score], a
    jmp invert_ball_vx

invert_ball_vx:
    mov b, 0
    sub b, [ball_vx]
    mov [ball_vx], b
    jmp ball_vx_continue

invert_ball_vy:
    mov b, 0
    sub b, [ball_vy]
    mov [ball_vy], b
    jmp ball_vy_continue

game_stop:
    halt

player1_move_up:
    mov a, [player1_y]
    cmp a, 6
    jb input_loop
    sub a, 6
    mov [player1_y], a
    jmp input_loop

player1_move_down:
    mov a, [player1_y]
    cmp a, 255 - 100 - 6
    ja input_loop
    add a, 6
    mov [player1_y], a
    jmp input_loop

player2_move_up:
    mov a, [player2_y]
    cmp a, 6
    jb input_loop
    sub a, 6
    mov [player2_y], a
    jmp input_loop

player2_move_down:
    mov a, [player2_y]
    cmp a, 255 - 100 - 6
    ja input_loop
    add a, 6
    mov [player2_y], a
    jmp input_loop

draw_rect:
    mov a, [sp + 2]
    mov [0xfb], a
    mov a, [sp + 3]
    mov [0xfc], a
    mov a, 2
    mov [0xfd], a

    mov a, [sp + 2]
    add a, [sp + 4]
    mov [0xfb], a
    mov a, 3
    mov [0xfd], a

    mov a, [sp + 3]
    add a, [sp + 5]
    mov [0xfc], a
    mov a, 3
    mov [0xfd], a

    mov a, [sp + 2]
    mov [0xfb], a
    mov a, 3
    mov [0xfd], a

    mov a, [sp + 3]
    mov [0xfc], a
    mov a, 3
    mov [0xfd], a

    ret 4

player1_y: db (255 - 100) / 2
player2_y: db (255 - 100) / 2
player1_score: db 0
player2_score: db 0

ball_x: db (255 - 10) / 2
ball_y: db (255 - 10) / 2
ball_vx: db 4
ball_vy: db 0
`
    push 5
    push 3
    push $$
    mov a, 8
    bankcall a, add
    halt

%bank 8

add:
    mov a, [sp + 3]
    add a, [sp + 4]
    mov b, [sp + 2]
    bankret b, 3
